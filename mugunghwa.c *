#include <stdio.h>
#include <Windows.h>  // 윈도우 API 헤더 파일
#include <conio.h>
#include <stdlib.h>
#include <time.h>

char map[100][300];  // 맵 배열
int playerx[5], playery[5];  // 플레이어 위치
int playerAlive[5];  // 플레이어 생존 여부
int tick = 0;  // 시간
int move_tick = 0;  // 이동 시간

// 좌표 이동 함수
void gotoxy(int row, int col) {
    COORD pos = { col, row };  // 커서 좌표 구조체
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);  // 커서 위치 이동
}

// 맵 그리기 함수
void draw(void) {
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 45; j++) {
            gotoxy(i, j);
            printf("%c", map[i][j]);  // 해당 위치에 맵 요소 출력
        }
    }
}

// 맵 초기화 함수
void initializeMap(void) {
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 45; j++) {
            if (i == 0 || i == 10 || j == 0 || j == 44) {
                map[i][j] = '#';  // 테두리 그리기
            } else if (i >= 4 && i <= 6 && j <= 1) {
                map[i][j] = '@';  // 출발점 설정
            } else {
                map[i][j] = ' ';  // 빈 공간으로 초기화
            }
        }
    }
}

// 플레이어 위치 갱신 함수
void updatePlayerPosition(int player) {
    map[playerx[player]][playery[player]] = '0' + player;  // 플레이어 위치 갱신
}

// 플레이어 이동 함수
void movePlayer(int player, int dx, int dy) {
    if (playerAlive[player] == 0) return;  // 플레이어가 죽었으면 이동하지 않음
    int nx = playerx[player] + dx;  // 새로운 x 위치
    int ny = playery[player] + dy;  // 새로운 y 위치

    // 이동 가능한 위치인지 확인
    if (nx >= 1 && nx < 10 && ny >= 1 && ny < 44 && map[nx][ny] != '1' && map[nx][ny] != '2'
        && map[nx][ny] != '3' && map[nx][ny] != '4') {
        map[playerx[player]][playery[player]] = ' ';  // 이전 위치 비우기
        playerx[player] = nx;  // 새로운 x 위치 할당
        playery[player] = ny;  // 새로운 y 위치 할당
        updatePlayerPosition(player);  // 플레이어 위치 갱신
    }
}

// 무작위로 플레이어 이동 함수
void moveRandomPlayers(void) {
    for (int i = 1; i <= 4; i++) {
        if (playerAlive[i] == 0) continue;  // 플레이어가 죽었으면 다음으로
        int randomMove = rand() % 10 + 1;  // 무작위 이동 설정
        int dx = 0, dy = 0;

        // 이동 방향 설정
        if (randomMove <= 7) {
            dy = -1; // 왼쪽으로 이동
        } else if (randomMove == 8) {
            dx = -1; // 위로 이동
        } else if (randomMove == 9) {
            dx = 1;  // 아래로 이동
        }

        movePlayer(i, dx, dy);  // 플레이어 이동
    }
}

// 메인 함수
int main(void) {
    srand(time(NULL));  // 난수 생성을 위한 시드 설정

    // 초기 플레이어 설정
    for (int i = 0; i < 5; i++) {
        playerx[i] = i;  // 플레이어 x 위치 초기화
        playery[i] = 42;  // 플레이어 y 위치 초기화
        playerAlive[i] = 1;  // 플레이어 생존 여부 설정
    }

    // 게임 루프
    while (1) {
        initializeMap();  // 맵 초기화

        // 플레이어 위치 갱신
        for (int i = 0; i < 5; i++) {
            if (playerAlive[i]) {
                updatePlayerPosition(i);
            }
        }

        draw();  // 맵 그리기

        moveRandomPlayers();  // 플레이어 무작위 이동
        draw();  // 맵 그리기
        move_tick += 1000;  // 이동 시간 갱신

        // 플레이어가 도착 지점을 넘었는지 확인
        if (move_tick % 20000 == 0) {
            for (int i = 0; i < 5; i++) {
                if (playerAlive[i] && playery[i] == 1) {
                    playerAlive[i] = 0;  // 플레이어 죽음 처리
                    draw();  // 맵 그리기
                }
            }
        }

        // 게임 종료 확인
        int playersLeft = 0;
        for (int i = 0; i < 5; i++) {
            if (playerAlive[i]) {
                playersLeft++;
            }
        }

        // 모든 플레이어가 나간 경우 종료
        if (playersLeft == 0) {
            gotoxy(13, 1);
            printf("All players are out!");  // 모든 플레이어가 나갔음을 출력
            break;  // 루프 종료
        }

        Sleep(300);  // 일시 정지
        tick += 1000;  // 시간 갱신
    }

    return 0;
